import { createMocks } from 'node-mocks-http'
import { POST } from '@/app/api/auth/send-code/route'

// Mock Next.js Request/Response
global.Request = jest.fn().mockImplementation((url, options) => ({
  url,
  method: options?.method || 'GET',
  headers: new Map(Object.entries(options?.headers || {})),
  json: async () => options?.body ? JSON.parse(options.body) : {},
  text: async () => options?.body || '',
}))

global.Response = jest.fn().mockImplementation((body, options) => ({
  status: options?.status || 200,
  headers: new Map(Object.entries(options?.headers || {})),
  json: async () => body,
  text: async () => typeof body === 'string' ? body : JSON.stringify(body),
}))

// Mock the SMS auth functions
jest.mock('@/lib/sms-auth', () => ({
  sendVerificationCode: jest.fn(),
  validateMauritanianPhone: jest.fn(),
  formatMauritanianPhone: jest.fn(),
  generateVerificationCode: jest.fn(),
  verifyCode: jest.fn(),
  generateAuthToken: jest.fn(),
  verifyAuthToken: jest.fn(),
}))

// Mock environment validation
jest.mock('@/lib/env-validation', () => ({
  getConfig: () => ({
    auth: { jwtSecret: 'test-jwt-secret' },
    sms: {
      accountSid: 'test-sid',
      authToken: 'test-token',
      phoneNumber: '+1234567890',
    },
  }),
  validateEnvironment: jest.fn(),
}))

// Mock MongoDB
jest.mock('@/lib/mongodb', () => ({
  __esModule: true,
  default: jest.fn().mockResolvedValue(true),
}))

// Mock rate limiting
jest.mock('@/lib/rate-limiter', () => ({
  smsRateLimit: jest.fn().mockResolvedValue(null), // No rate limit hit
}))

const { sendVerificationCode, validateMauritanianPhone } = require('@/lib/sms-auth')

describe.skip('/api/auth/send-code', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it.skip('sends verification code for valid phone number', async () => {
    validateMauritanianPhone.mockReturnValue(true)
    sendVerificationCode.mockResolvedValue({
      success: true,
      message: 'Verification code sent successfully'
    })

    const { req } = createMocks({
      method: 'POST',
      body: { phoneNumber: '+22212345678' },
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
    expect(sendVerificationCode).toHaveBeenCalledWith('+22212345678')
  })

  it('returns error for missing phone number', async () => {
    const { req } = createMocks({
      method: 'POST',
      body: {},
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.error).toBe('Phone number is required')
  })

  it('returns error for invalid phone number format', async () => {
    validateMauritanianPhone.mockReturnValue(false)

    const { req } = createMocks({
      method: 'POST',
      body: { phoneNumber: 'invalid' },
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.error).toBe('Invalid Mauritanian phone number format')
  })

  it('returns error when SMS sending fails', async () => {
    validateMauritanianPhone.mockReturnValue(true)
    sendVerificationCode.mockResolvedValue({
      success: false,
      message: 'Failed to send SMS'
    })

    const { req } = createMocks({
      method: 'POST',
      body: { phoneNumber: '+22212345678' },
    })

    const response = await POST(req as any)
    const data = await response.json()

    expect(response.status).toBe(400)
    expect(data.error).toBe('Failed to send SMS')
  })
})

describe('Rate Limiting', () => {
  it('respects rate limits', async () => {
    const mockRateLimit = require('@/lib/rate-limiter').smsRateLimit
    mockRateLimit.mockResolvedValueOnce({
      status: 429,
      json: () => Promise.resolve({ error: 'Too many requests' })
    })

    const { req } = createMocks({
      method: 'POST',
      body: { phoneNumber: '+22212345678' },
    })

    const response = await POST(req as any)

    expect(response.status).toBe(429)
  })
})